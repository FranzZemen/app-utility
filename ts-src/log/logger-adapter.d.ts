import { ExecutionContextI } from '../execution-context.js';
export interface LoggerI {
    error(err: any, ...params: any[]): any;
    warn(data: any, message?: string, ...params: any[]): any;
    info(data: any, message?: string, ...params: any[]): any;
    debug(data: any, message?: string, ...params: any[]): any;
    trace(data: any, message?: string, ...params: any[]): any;
}
export declare class LoggerAdapter implements LoggerI {
    private execContext?;
    repo: string;
    sourceFile: string;
    _method: string;
    static lvl_none: string;
    static lvl_error: string;
    static lvl_warn: string;
    static lvl_info: string;
    static lvl_debug: string;
    static lvl_trace: string;
    static _noLogging: number;
    static _error: number;
    static _warn: number;
    static _info: number;
    static _debug: number;
    static _trace: number;
    static _none: number;
    static levels: string[];
    level: number;
    private timingContext;
    private start;
    private interim;
    private showHiddenInspectAttributes;
    private depth;
    private attributesAsString;
    private momentFormat;
    private logger;
    private pendingEsLoad;
    constructor(execContext?: ExecutionContextI, repo?: string, sourceFile?: string, _method?: string, loggerImpl?: undefined);
    setMethod(_method: string): LoggerAdapter;
    error(err: any, stacktrace?: any, color?: string): void;
    warn(data: any, message?: string, color?: string): void;
    info(data: any, message?: string, color?: string): void;
    debug(data: any, message?: string, color?: string): void;
    trace(data: any, message?: string, color?: string): void;
    log(logMethod: (color: string, logMessage: string) => void, data: any, message: string, color: string, cwcPrefix: string): void;
    startTiming(context: any): void;
    interimTiming(interimContext: any): void;
    stopTiming(): void;
    private initializeOverrides;
    private getLogObject;
    private warnAllowed;
    private infoAllowed;
    private debugAllowed;
    private traceAllowed;
}
